enum CharacterStatus {
  ALIVE
  DECEASED
  UNKNOWN
}

enum CharacterGender {
  MALE
  FEMALE
  OTHER
  UNKNOWN
}

input CreateCharacterInput {
  name: String!
  status: CharacterStatus
  bio: String
  voiceBy: [String!]!
  image: [String]
  occupation: [String!]!
  specie: String!
  home: [String]
  placeOfBirth: String
  alias: String
  gender: CharacterGender
  affiliations: [String]
  maritalStatus: String
  age: String
  placeOfDeath: String
  causeOfDeath: String
}

input UpdateCharacterInput {
  name: String
  status: CharacterStatus
  bio: String
  voiceBy: [String]
  image: [String]
  occupation: [String]
  specie: String
  home: [String]
  placeOfBirth: String
  alias: String
  gender: CharacterGender
  affiliations: [String]
  maritalStatus: String
  age: String
  placeOfDeath: String
  causeOfDeath: String
}

type Relatives {
  id: ID!
  name: String!
  image: String
  characters: [Character!]!
}

type Enemies {
  id: ID!
  name: String!
  image: String
  characters: [Character!]!
}

type Character {
  id: ID!
  name: String!
  status: CharacterStatus
  bio: String
  episodes: [Episode]
  voiceBy: [String!]!
  age: String
  image: [String]
  occupation: [String!]!
  specie: String!
  home: [String]
  placeOfBirth: String
  alias: String
  gender: CharacterGender
  affiliations: [String]
  placeOfDeath: String
  causeOfDeath: String
  maritalStatus: String
}

type Query {
  characters: [Character]
  charactersByStatus(status: CharacterStatus!): [Character]
  charactersByGender(gender: CharacterGender!): [Character]
  character(id: ID!): Character
  characterByAlias(alias: String): Character
}

type Mutation {
  createCharacter(input: CreateCharacterInput): Character
  deleteCharacter(id: ID!): Character
  updateCharacter(id: ID!, input: UpdateCharacterInput): Character
}
